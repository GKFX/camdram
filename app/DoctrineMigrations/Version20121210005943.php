<?php

namespace Application\Migrations;

use Doctrine\DBAL\Schema\Schema;

use Zenstruck\Bundle\MigrationsBundle\Migrations\AbstractMigration;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Acts\CamdramBundle\Entity\UserIdentity;
use Doctrine\ORM\EntityManager;

/**
 * Migration for user/authentication stuff
 */
class Version20121210005943 extends AbstractMigration
{
    public function up(Schema $schema)
    {
        // this up() migration is autogenerated, please modify it to your needs

        $this->abortIf($this->connection->getDatabasePlatform()->getName() != "mysql");

        $this->addSql("CREATE TABLE acts_user_identities (id INT AUTO_INCREMENT NOT NULL, user_id INT NOT NULL, service VARCHAR(50) NOT NULL, remote_id INT NULL, remote_user VARCHAR(255) DEFAULT NULL, token VARCHAR(255) DEFAULT NULL, token_secret VARCHAR(255) DEFAULT NULL, INDEX IDX_B4BCDC47A76ED395 (user_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB");
        $this->addSql("ALTER TABLE acts_user_identities ADD CONSTRAINT FK_B4BCDC47A76ED395 FOREIGN KEY (user_id) REFERENCES acts_users (id)");
        $this->addSql("ALTER TABLE `acts_users` ADD person_id INT DEFAULT NULL, ADD upgraded TINYINT(1)");
        $this->addSql("ALTER TABLE acts_users ADD CONSTRAINT FK_62A20753217BBB47 FOREIGN KEY (person_id) REFERENCES acts_people_data (id)");
        $this->addSql("CREATE INDEX UNIQ_62A20753217BBB47 ON acts_users (person_id)");
    }

    public function dataUp(ContainerInterface $container)
    {

        $em = $container->get('doctrine.orm.entity_manager');
        $this->generateIdentities($em);
        $this->matchPeopleToUsers($em);
    }

    /**
     * Auto-create identities based on email address pseudo-guesswork
     *
     * @param \Doctrine\ORM\EntityManager $em
     */
    private function generateIdentities(EntityManager $em)
    {
        $users = $em->getRepository('ActsCamdramBundle:User')->findAll();
        foreach ($users as $user) {
            if (preg_match('/^[a-z]+[0-9]+$/i',$user->getEmail())) {
                //Create identity for abc12 (crsid)
                $i = new UserIdentity;
                $i->setService('raven');
                $i->setRemoteUser($user->getEmail());
                $i->setUser($user);
                $user->addIdentity($i);
                $em->persist($i);
            }
            else if (preg_match('/^([a-z]+[0-9]+)@cam\.ac\.uk$/i', $user->getEmail(), $matches)) {
                //Create identity for abc12@cam.ac.uk
                $i = new UserIdentity;
                $i->setService('raven');
                $i->setRemoteUser($matches[1]);
                $i->setUser($user);

                $user->addIdentity($i);
                $em->persist($i);
            }
            else if (preg_match('/^(.*)@cantab.net$/i', $user->getEmail(), $matches)) {
                //Create identity for fred.smith@cantab.net
                $i = new UserIdentity;
                $i->setService('cantab');
                $i->setRemoteUser($matches[1]);
                $i->setUser($user);

                $user->addIdentity($i);
                $em->persist($i);
            }
            else if (preg_match('/^(.*)@(?:gmail|googlemail)\..*$/i', $user->getEmail(), $matches)) {
                //Create identity for xxx@gmail.com / xxx@googlemail.com
                $i = new UserIdentity;
                $i->setService('google');
                $i->setRemoteUser($user->getEmail());
                $i->setUser($user);
                $user->addIdentity($i);
                $em->persist($i);
            }
            else if (preg_match('/^(.*)@(?:hotmail|live|outlook|msn)\..*$/i', $user->getEmail(), $matches)) {
                //Create identity for xxx@hotmail.com etc
                $i = new UserIdentity;
                $i->setService('windows_live');
                $i->setRemoteUser($user->getEmail());
                $i->setUser($user);
                $user->addIdentity($i);
                $em->persist($i);
            }
            else if (preg_match('/^(.*)@(?:yahoo)\..*$/i', $user->getEmail(), $matches)) {
                //Create identity for xxx@yahoo.com etc
                $i = new UserIdentity;
                $i->setService('yahoo');
                $i->setRemoteUser($user->getEmail());
                $i->setUser($user);
                $user->addIdentity($i);
                $em->persist($i);
            }
        }
    }

    private function matchPeopleToUsers(EntityManager $em)
    {
        //Try to map people to users
        $people_res = $em->getRepository('ActsCamdramBundle:Person');
        $users_res = $em->getRepository('ActsCamdramBundle:User');
        $users = $users_res->findAll();

        //First, do exact matches
        foreach ($users as $user) {
            $p = $people_res->findOneByName($user->getName());
            if ($p) {
                $user->setPerson($p);
                echo "Linked ".$p->getName()."\r\n";
            }
        }
        $em->flush();

        //Now do more fuzzy matching based on surnames...
        $users = $em->createQuery('SELECT u FROM ActsCamdramBundle:User u WHERE u.person_id IS NULL')->getResult();

        foreach ($users as $user) {
            preg_match('/(.*) ([a-z\'\-]+)$/i', trim($user->getName()), $matches);
            if (count($matches) == 0) continue;
            $first_names = trim(strtolower($matches[1]));
            $surname = $matches[2];

            $people = $em->createQuery('SELECT p FROM ActsCamdramBundle:Person p WHERE p.name LIKE :name')
                ->setParameter('name', '% '.$surname.'%')->getResult();

            if (count($people) > 0) {
                $min = 99999;
                $p = null;
                foreach ($people as $person) {
                    $person_first_names = str_replace($surname, '', $person->getName());
                    $dist = levenshtein($first_names, $person_first_names);
                    if ($dist < $min) $p = $person;
                }
                $person_first_names = strtolower(trim(str_replace($surname, '', $p->getName())));
                if (!trim($person_first_names) || !trim($first_names)) continue;

                //Split and test sub-names:
                $parts1 = preg_split('/[\s,\-]+/',$first_names);
                $parts2 = preg_split('/[\s,\-]+/',$person_first_names);
                if (count(array_intersect($parts1, $parts2)) > 0) {
                    $user->setPerson($p);
                    echo 'Linked '.$user->getName().' -> '.$p->getName()."\r\n";
                }
                else if ((substr_count($person_first_names, $first_names) > 0 ||  substr_count($first_names, $person_first_names) > 0)) {
                    $user->setPerson($p);
                    echo 'Linked '.$user->getName().' -> '.$p->getName()."\r\n";
                }
                else {
                    similar_text($first_names, $person_first_names, $percent);
                    if (substr($person_first_names, 0, 1) == substr($first_names, 0, 1)) {
                        if ($percent > 55
                            && $first_names != 'mark' && $person_first_names != 'max'
                            && $first_names != 'jon' && $person_first_names != 'joe') {
                            $user->setPerson($p);
                            echo 'Linked '.$user->getName().' -> '.$p->getName()."\r\n";
                        }
                    }
                }
            }
        }

        $em->flush();
    }

    public function down(Schema $schema)
    {
        // this down() migration is autogenerated, please modify it to your needs
        $this->abortIf($this->connection->getDatabasePlatform()->getName() != "mysql");
        
        $this->addSql("DROP TABLE acts_user_identities");
        $this->addSql("ALTER TABLE acts_users DROP FOREIGN KEY FK_62A20753217BBB47");
        $this->addSql("DROP INDEX `UNIQ_62A20753217BBB47` ON `acts_users`");
        $this->addSql("ALTER TABLE `acts_users` DROP person_id");
    }

    public function dataDown(ContainerInterface $container)
    {

    }
}
