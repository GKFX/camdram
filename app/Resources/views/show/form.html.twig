{{ form_errors(form) }}

{{ form_row(form.name) }}
{{ form_row(form.author) }}
{{ form_row(form.category) }}

<div class="form-large-row">
    {{ form_label(form.performances) }}
    <div>
        {{ form_widget(form.multi_venue) }}
        {{ form_errors(form.multi_venue) }}

        <div class="performances entity_collection" data-prototype="{% filter escape('html') %}{% include 'show/performance-form.html.twig' with {performance: form.performances.vars.prototype} %}{% endfilter %}">
            {% for performance in form.performances %}
                {% include 'show/performance-form.html.twig' %}
            {% endfor %}
        </div>
        <ul class="inline-list right performance-links">
           <li> <a href="#" class="add_link">Add date range</a></li>
        </ul>
    </div>
</div>


<div class="form-large-row main-venue-row">
    {{ form_label(form.venue) }}
    {{ form_widget(form.venue) }}
    {{ form_errors(form.venue) }}
</div>

<div class="form-large-row">
    {{ form_label(form.societies) }}
    <div>
        <p><small>
            Registered societies will appear in the search pop-up,
            but you can also add societies that aren't registered with Camdram.
            Adding a registered society allows its admins to approve and edit
            your show. &nbsp;
            <a href="{{ path('acts_camdram_faq') }}#newsociety">How do societies
            become registered with Camdram?</a>
            </small>
        {{ form_errors(form.societies) }}</p>
        <div class="linked-societies" data-prototype="{% filter escape('html') %}{% include 'show/society-form.html.twig' with {society: form.societies.vars.prototype} %}{% endfilter %}">
            {% for society in form.societies %}
		{% include 'show/society-form.html.twig' with {society: society} %}
            {% endfor %}
        </div>
        <ul class="inline-list right">
           <li> <a href="#" class="add_link">Add society</a></li>
        </ul>
    </div>
    {% do form.societies.setRendered %}
</div>

<div class="form-large-row">
    {{ form_label(form.description) }}
    <div>
        <p><small>{{ include('markdown_notice.html.twig', { thing: 'show descriptions' }) }}</small></p>

        <p><small>Write this with the general public in mind â€“ what is this show and why
            should somebody come to see it? Don't mention auditions or production
            team vacancies: you'll add them later.</small></p>
         {{ form_widget(form.description) }}
         {{ form_errors(form.description) }}
    </div>
</div>

<div class="form-large-row">
    <span>Ticket sales</span>
    <div>
        <div class="form-small-widget">
            {{ form_label(form.online_booking_url) }}
            {{ form_widget(form.online_booking_url) }}
            {{ form_errors(form.online_booking_url) }}
        </div>
        <div class="form-small-widget">
            {{ form_label(form.prices) }}
            {{ form_widget(form.prices) }}
            {{ form_errors(form.prices) }}
        </div>
    </div>
</div>

<div class="form-large-row">
    <span>Social</span>
    <div>
        <div class="form-small-widget">
            {{ form_label(form.facebook_id) }}
            {{ form_widget(form.facebook_id) }}
            {{ form_errors(form.facebook_id) }}
        </div>
        <div class="form-small-widget">
            {{ form_label(form.twitter_id) }}
            {{ form_widget(form.twitter_id) }}
            {{ form_errors(form.twitter_id) }}
        </div>
    </div>
</div>

<div class="form-large-row">
    {{ form_label(form.theme_color, "Theme colour") }}
    <div>
        <div class="color-swatch"></div>
        <p><small>Setting a theme colour makes your show stand out around Camdram. (If you pick a pale colour it will be darkened in some places for legibility.)</small></p>
        <div class="form-small-widget">
            <span>Code:</span>
            <input type="text" id="show_theme_color" name="{{ form.theme_color.vars.full_name }}"
                   pattern="#[0-9A-Fa-f]{6}" value="{{ form.theme_color.vars.value }}">
            {{ form_errors(form.theme_color) }}
            {%- do form.theme_color.setRendered -%}
        </div>
        <div id="color-sliders">
            <label><span>Hue:</span><input type="range" id="h-slider" min="0" max="360" step="any"></label>
            <label><span>Saturation:</span><input type="range" id="s-slider" min="0" max="100" step="any"></label>
            <label><span>Lightness:</span><input type="range" id="l-slider" min="0" max="80" step="any"></label>
        </div>
    </div>
</div>

{% if not is_granted('APPROVE', form.vars.data) %}
    <p class="panel">After you click 'Create', this show will not be public
    until moderators (normally the society and venue adminstrators) approve it.
    Please be patient: this may take a few days. You can make changes while waiting
    for approval.
    Camdram's volunteer site admins moderate shows without a registered society
    or venue.
    </p>
{% endif %}


{{ form_rest(form) }}

<script>
{#- begin-CSP-permitted-script -#}
$(function() {

    var update_date_fields = function() {
        var val = $('#show_multi_venue input:checked').val();
        switch (val) {
            case 'single':
                $('.performances .venue-row').hide();
                $('.main-venue-row').show();
                break;
            case 'multi':
                $('.performances .venue-row').show();
                $('.main-venue-row').hide();
                break;
        }
    };

    $('input[type=date]').live('change', function() {
        var $self = $(this);
        $self.parents('.performance').find('input[type=date]').each(function(key, input) {
            if (!$(input).val()) {
                $(input).val($self.val());
            }
        })
    })

    $('#show_multi_venue input').change(update_date_fields)
    $('.main-venue-row select').change(function() {
        $('.performances .venue-row select').val($(this).val());
    })

    update_date_fields();
    $('.performances').entityCollection({
        initialiseRow: update_date_fields
    });
    $('.linked-societies').entityCollection({
        initialiseRow: function(index, row) {
            var input = $(row).find("input");
            input.addClass("autocomplete_input");
            input.entitySearch({route: 'get_societies'});
        },
        min_items: 0
    });

    // Color selector code.
    var h_slider = document.querySelector('#h-slider'),
        s_slider = document.querySelector('#s-slider'),
        l_slider = document.querySelector('#l-slider'),
        slider_box = document.querySelector('#color-sliders'),
        color_field = document.querySelector('#show_theme_color');

    // Formulae from https://en.wikipedia.org/wiki/HSL_and_HSV.
    var hsl_to_rgb = function(H, S, L) {
        var a = S * Math.min(L, 1-L);
        var rgb = 1;
        for (var k = H/30; rgb < 0x1000000; k = (k + 8) % 12) {
            var x = Math.round(255 * (L - a * Math.max(Math.min(k-3, 9-k, 1), -1)));
            rgb = (rgb << 8) | x;
        }
        return '#' + rgb.toString(16).slice(-6);
    }
    var rgb_to_hsl = function(rgb) {
        var r = parseInt(rgb.substring(1, 3), 16) / 255,
            g = parseInt(rgb.substring(3, 5), 16) / 255,
            b = parseInt(rgb.substring(5, 7), 16) / 255;
        var max = Math.max(r, g, b),
            min = Math.min(r, g, b);
        switch (max) {
            case min:
                return [0, 0, max];
            case r:
                h = 360 + (60 * (g - b) / (max - min));
                break;
            case g:
                h = 120 + (60 * (b - r) / (max - min));
                break;
            case b:
                h = 240 + (60 * (r - g) / (max - min));
                break;
        }
        var l = (min + max) / 2;
        return [h % 360, (max - l)/Math.min(l, 1-l), l];
    }
    var update_from_sliders = function() {
        var rgb = hsl_to_rgb(h_slider.valueAsNumber,
            s_slider.valueAsNumber/100, l_slider.valueAsNumber/100);
        color_field.value = rgb;
        display_color(rgb, [h_slider.valueAsNumber,
            s_slider.valueAsNumber/100, l_slider.valueAsNumber/100]);
    }
    var update_from_field = function() {
        if (color_field.value && !(/^#[0-9A-Fa-f]{6}$/.test(color_field.value))) {
            // Convert invalid user input into a hex code, or blank if there are no hex digits at all.
            var temp = color_field.value.replace(/[^0-9A-Fa-f]/g, '');
            if (temp.length === 0) {
                color_field.value = '';
            } else if (temp.length === 3) {
                color_field.value = '#' + temp[0]+temp[0] + temp[1]+temp[1] + temp[2]+temp[2];
            } else {
                color_field.value = '#' + (temp + '000000').substring(0, 6);
            }
        }
        if (color_field.value) {
            var hsl = rgb_to_hsl(color_field.value);
            h_slider.value = hsl[0];
            s_slider.value = hsl[1] * 100;
            l_slider.value = hsl[2] * 100;
        }
        display_color(color_field.value, hsl);
    }
    var display_color = function(rgb, hsl) {
        if (rgb) {
            document.body.style.setProperty("--custom-color", rgb);
        } else {
            document.body.style.removeProperty("--custom-color");
        }
        slider_box.style.setProperty("--hue", hsl[0]);
        slider_box.style.setProperty("--sat", hsl[1]*100 + '%');
        slider_box.style.setProperty("--light", hsl[2]*100 + '%');
    }

    // EventListeners. 'input' gives live feedback from the sliders.
    slider_box.addEventListener('change', update_from_sliders);
    slider_box.addEventListener('input', update_from_sliders);
    color_field.addEventListener('change', update_from_field);

    update_from_field();
});
{#- end-CSP-permitted-script -#}
</script>
<style>
#color-sliders {
    width: 100%;
}
#color-sliders label {
    display: flex;
}
#color-sliders label span {
    min-width: 7em;
}
#color-sliders input[type="range"] {
    flex: 1;
}
#h-slider::-moz-range-track {
    width: 100%;
    height: 8px;
    background: linear-gradient(to right, #ff0000,#ff9900,#ccff00,#33ff00,#00ff66,#00ffff,#0066ff,#3300ff,#cc00ff,#ff0099,#ff0000);
    border: 0;
}
#s-slider::-moz-range-track {
    width: 100%;
    height: 8px;
    background: linear-gradient(to right, hsl(var(--hue), 0%, var(--light)), hsl(var(--hue), 50%, var(--light)), hsl(var(--hue), 100%, var(--light)));
    border: 0;
}
#l-slider::-moz-range-track {
    width: 100%;
    height: 8px;
    background: linear-gradient(to right, #000, hsl(var(--hue), var(--sat), 50%), #fff);
    border: 0;
}
.color-swatch {
    width: 3em;
    height: 3em;
    float: right;
    border: 2px solid black;
    background: var(--custom-color, repeating-linear-gradient(45deg, white 0px, white 10px, #000 11px, #000 12px));
}
</style>
