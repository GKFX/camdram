<?php

namespace Acts\CamdramBundle\Entity;

use Doctrine\ORM\EntityRepository;

use Doctrine\ORM\Query\Expr;

/**
 * PerformanceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PerformanceRepository extends EntityRepository
{
    /**
     * findInDateRange
     *
     * Find all authorized performances between two dates, joined to the
     * corresponding show.
     *
     * @param \DateTime $start
     * @param \DateTime $end
     * @return array
     */
    public function findInDateRange(\DateTime $start, \DateTime $end)
    {
        $qb = $this->createQueryBuilder('p')
            ->join('p.show', 's')
            ->leftjoin('s.venue', 'v')
            ->addSelect('s')
            ->addSelect('v')
            ->where('s.authorised_by is not null')
            ->andWhere('s.entered = true')
            ->andWhere('p.start_date <= :end')
            ->andWhere('p.end_date >= :start')
            ->setParameter('start', $start)
            ->setParameter('end', $end)
        ;
        return $qb->getQuery()->getResult();
    }

    public function getNumberInDateRange(\DateTime $start, \DateTime $end)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->where($qb->expr()->andX('p.end_date > :start', 'p.end_date < :end'))
            ->orWhere($qb->expr()->andX('p.start_date > :start', 'p.start_date < :end'))
            ->orWhere($qb->expr()->andX('p.start_date < :start', 'p.end_date > :end'))
            ->setParameter('start', $start)
            ->setParameter('end', $end);

        $result = $qb->getQuery()->getResult();
        $count = 0;
        foreach ($result as $p) {
            $count += $p->getEndDate()->diff($p->getStartDate())->d + 1;
            if ($p->getExcludeDate() && $p->getExcludeDate()->format('u') > 0) $count--;
        }

        return $count;
    }

    public function getUpcomingByVenue(\DateTime $now, Venue $venue)
    {
        $query = $this->createQueryBuilder('p')
            ->where('p.end_date > :now')
            ->andWhere('p.venue = :venue')
            ->orderBy('p.start_date', 'ASC')
            ->setParameter('venue', $venue)
            ->setParameter('now', $now)
            ->getQuery();
        return $query->getResult();
    }
}
