<?php

namespace Acts\CamdramBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;

/**
 * TimePeriodRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TimePeriodGroupRepository extends EntityRepository
{

    public function getYears()
    {
        $groups = $this->createQueryBuilder('g')
            ->select(array('g.start_at','g.end_at'))
            ->orderBy('g.start_at', 'ASC')
            ->join('ActsCamdramBundle:Performance', 'p')
            ->where('p.start_date <= g.end_at')->andWhere('p.end_date >= g.start_at')
            ->groupBy('g.id')
            ->getQuery()->getResult();

        $years = array();
        $last_year = null;
        foreach ($groups as $group) {
            foreach (array($group['start_at'], $group['end_at']) as $date) {
                $year = $date->format('Y');
                if ($year != $last_year) {
                    $years[] = $year;
                    $last_year = $year;
                }
            }
        }
        return $years;
    }

    public function getGroupAt(\DateTime $date)
    {
        return $this->createQueryBuilder('g')
            ->where('g.start_at < :now')->andWhere('g.end_at >= :now')
            ->setParameter('now', $date)
            ->getQuery()->getOneOrNullResult();
    }

    public function getGroupsByYear($year)
    {
        if (!is_numeric($year)) {
            throw new \InvalidArgumentException('$year must be a number');
        }

        $query = $this->createQueryBuilder('g')
            ->where('g.end_at <= :end')->andWhere('g.start_at >= :start')
            ->orderBy('g.start_at')
            ->groupBy('g.id')
            ->setParameter('start', new \DateTime($year.'-01-01'))
            ->setParameter('end', new \DateTime(($year+1).'-01-01'))

            ->getQuery();
        return $query->getResult();
    }

    public function findOneByYearAndSlug($year, $slug)
    {
        if (!is_numeric($year)) {
            throw new \InvalidArgumentException('$year must be a number');
        }

        $query = $this->createQueryBuilder('g')
            ->where('g.end_at <= :end')->andWhere('g.start_at >= :start')
            ->andWhere('g.slug = :slug')
            ->orderBy('g.start_at')
            ->groupBy('g.id')
            ->setParameter('start', new \DateTime($year.'-01-01'))
            ->setParameter('end', new \DateTime(($year+1).'-01-01'))
            ->setParameter('slug', $slug)
            ->getQuery();
        return $query->getOneOrNullResult();
    }

}
